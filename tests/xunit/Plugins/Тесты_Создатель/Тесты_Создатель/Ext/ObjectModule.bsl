#Область ОписаниеПеременных

Перем КонтекстЯдра;
Перем Ожидаем;
Перем Утверждения;
Перем ГенераторТестовыхДанных;
Перем ЗапросыИзБД;
Перем УтвержденияПроверкаТаблиц;
Перем СтроковыеУтилиты;
Перем Данные;

Перем ФабрикаСоздателей;

#КонецОбласти

#Область ПрограммныйИнтерфейс

#Область ИнтерфейсТестирования

//{ основные процедуры для юнит-тестирования xUnitFor1C

Процедура Инициализация(КонтекстЯдраПараметр) Экспорт
	КонтекстЯдра = КонтекстЯдраПараметр;
	Ожидаем = КонтекстЯдра.Плагин("УтвержденияBDD");
	Утверждения = КонтекстЯдра.Плагин("БазовыеУтверждения");
	ГенераторТестовыхДанных = КонтекстЯдра.Плагин("СериализаторMXL");
	ЗапросыИзБД = КонтекстЯдра.Плагин("ЗапросыИзБД");
	УтвержденияПроверкаТаблиц = КонтекстЯдра.Плагин("УтвержденияПроверкаТаблиц");
	СтроковыеУтилиты = КонтекстЯдра.Плагин("СтроковыеУтилиты");
	Данные = КонтекстЯдра.Плагин("Данные");
КонецПроцедуры

Процедура ЗаполнитьНаборТестов(НаборТестов) Экспорт
	//НаборТестов.Добавить("ПараметрическийТест", НаборТестов.ПараметрыТеста(5, 7), "Тест должен показать использование представления теста");
		//Тест = НаборТестов.Добавить("ПараметрическийТест2");
		//Тест.Параметры.Добавить(12);
	НаборТестов.НачатьГруппу("Подключения Создателя к плагину Данные", Ложь);
		НаборТестов.Добавить("ТестПроверяетПодключениСоздателяКПлагинуДанные");
		
	НаборТестов.НачатьГруппу("АПИ Создателя", Ложь);
		НаборТестов.Добавить("ТестСоздаетДанныеЧерезСоздателя");
		НаборТестов.Добавить("ТестСоздаетДанныеЧерезСоздателяДобавляяРеквизиты");
		
	НаборТестов.НачатьГруппу("Подключение создателей через фабрику", Ложь);
		НаборТестов.Добавить("ТестПодключаетСоздателяКФабрикеСоздателей");
		НаборТестов.Добавить("ТестПодключаетСоздателяКФабрикеСоздателейЯвноУказываюПутьДанных");
		НаборТестов.Добавить("ТестИсключаетНеверногоСоздателяКФабрикеСоздателей");
КонецПроцедуры
//}

#КонецОбласти

#Область Тесты

//{ блок юнит-тестов - сами тесты

Процедура ПередЗапускомТеста() Экспорт
	НачатьТранзакцию();
	
	ФабрикаСоздателей = НоваяФабрикаСоздателей();
	ОбъектСоздатель = ПодключитьСоздателя(ЭтотОбъект);
	
КонецПроцедуры

Процедура ПослеЗапускаТеста() Экспорт
	Если ТранзакцияАктивна() Тогда
		ОтменитьТранзакцию();
	КонецЕсли; 
КонецПроцедуры

Процедура ТестПроверяетПодключениСоздателяКПлагинуДанные() Экспорт
	
	ПроверяетПодключениСоздателяКПлагинуДанные(ЭтотОбъект);
	
КонецПроцедуры

Процедура ПроверяетПодключениСоздателяКПлагинуДанные(Создатель) Экспорт
	
	//Справочник1 = Данные.Создатель(Создатель("Справочник.Справочник1"))
	Справочник1 = Данные.Создатель(Создатель)
		.Реквизит("РеквизитСтрока", "Строка1")
		.Создать();	
		
	Ожидаем.Что(Справочник1.Реквизит1, "Справочник1.Реквизит1").
		Равно(Перечисления.Перечисление1.ЗначениеПеречисления2);

	Ожидаем.Что(Справочник1.Наименование, "Справочник1.Наименование")
		.Содержит("_");
	//Ожидаем.Что(Справочник1.Наименование, "Справочник1.Наименование")
	//	.Равно("123");
	
КонецПроцедуры

Процедура ТестСоздаетДанныеЧерезСоздателя() Экспорт
	
	Справочник1 = Создатель("Справочник.Справочник1")
		.Создать();	
		
	Ожидаем.Что(Справочник1, "Справочник1")
		.ИмеетТип("СправочникОбъект.Справочник1");

	Ожидаем.Что(Справочник1.Реквизит1, "Справочник1.Реквизит1")
		.Равно(Перечисления.Перечисление1.ЗначениеПеречисления2);

	Ожидаем.Что(Справочник1.Наименование, "Справочник1.Наименование")
		.Равно("");
	
КонецПроцедуры

Процедура ТестСоздаетДанныеЧерезСоздателяДобавляяРеквизиты() Экспорт
	
	ОкружениеТеста = Новый Структура ();
    ОкружениеТеста.Вставить("Наименование", "123");
    ОкружениеТеста.Вставить("Реквизит1", Перечисления.Перечисление1.ЗначениеПеречисления1);
	
	Справочник1 = Создатель("Справочник.Справочник1")
		.Создать(ОкружениеТеста);	
		
	Ожидаем.Что(Справочник1, "Справочник1")
		.ИмеетТип("СправочникОбъект.Справочник1");

	Ожидаем.Что(Справочник1.Реквизит1, "Справочник1.Реквизит1")
		.Равно(Перечисления.Перечисление1.ЗначениеПеречисления1);

	Ожидаем.Что(Справочник1.Наименование, "Справочник1.Наименование")
		.Равно("123");
	
КонецПроцедуры

Процедура ТестПодключаетСоздателяКФабрикеСоздателей() Экспорт
	
	ФабрикаСоздателей = НоваяФабрикаСоздателей();
	ОбъектСоздатель = ПодключитьСоздателя(ЭтотОбъект);
	
	НовыйСоздатель = Создатель("Справочник.Справочник1");
	
	Ожидаем.Что(НовыйСоздатель, "НовыйСоздатель == ОбъектСоздатель")
		.Равно(ОбъектСоздатель);
	
	ПроверяетПодключениСоздателяКПлагинуДанные(НовыйСоздатель);
	
КонецПроцедуры

Процедура ТестПодключаетСоздателяКФабрикеСоздателейЯвноУказываюПутьДанных() Экспорт
	
	ФабрикаСоздателей = НоваяФабрикаСоздателей();
	ОбъектСоздатель = ПодключитьСоздателя(ЭтотОбъект, "Справочник.Справочник1");
	
	НовыйСоздатель = Создатель("Справочник.Справочник1");
	
	Ожидаем.Что(НовыйСоздатель, "НовыйСоздатель == ОбъектСоздатель")
		.Равно(ОбъектСоздатель);
	
	ПроверяетПодключениСоздателяКПлагинуДанные(НовыйСоздатель);
	
КонецПроцедуры

Процедура ТестИсключаетНеверногоСоздателяКФабрикеСоздателей() Экспорт
	
	ФабрикаСоздателей = НоваяФабрикаСоздателей();
	ОбъектСоздатель = ПодключитьСоздателя(ЭтотОбъект, "Справочник.Справочник1");
	
	НовыйСоздатель = Создатель("Справочник.Справочник2");
	
	Ожидаем.Что(НовыйСоздатель, "НовыйСоздатель == Неопределено")
		.Равно(Неопределено);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Создатель

#Область ФабрикаСоздателей

// Подключить создателя. Если путь данных явно не задан, он получается из создателя
//
// Параметры:
//  ОбъектСоздатель	 - Произвольный - 
//  ИерархияДанных	 - Строка	 - 
// 
// Возвращаемое значение:
//   Произвольный - подключаемый создатель
//
Функция ПодключитьСоздателя(Знач ОбъектСоздатель, Знач ИерархияДанных = "") Экспорт
	
	Если ПустаяСтрока(ИерархияДанных) Тогда
		ИерархияДанных = ОбъектСоздатель.ТипВидМетаданного();
	КонецЕсли;
	
	ФабрикаСоздателей.Вставить(ИерархияДанных, ОбъектСоздатель);
	
	Возврат ОбъектСоздатель;
	
КонецФункции

// Получить создателя по пути к данным вида "Справочник.Справочник1"
//
// Параметры:
//  ПутьДанных	 - Строка - 
// 
// Возвращаемое значение:
//   Произвольный, Неопределено - найденный создатель
//
Функция Создатель(Знач ПутьДанных) Экспорт
	
	Возврат ФабрикаСоздателей.Получить(ПутьДанных);
	
КонецФункции

Функция НоваяФабрикаСоздателей()
	Результат = Новый Соответствие;
	Возврат Результат;
КонецФункции

#КонецОбласти

#Область Интерфейс_Создатель

// Указать путь создаваемого метаданного - Справочники.Склады, Документы.Реализация и т.п.
// 
// Возвращаемое значение:
//   Строка - 
//
Функция ТипВидМетаданного() Экспорт
	Возврат "Справочник.Справочник1";
КонецФункции

// Задать параметры по умолчанию для создания метаданного
// 	Можно добавлять доп.структуру ОбменДанными с Загрузка = Истина
//
// Параметры:
//  ДопПараметры - Неопределено, Структура	 - доп.параметры для установки
// 
// Возвращаемое значение:
//   Структура - ключ - имя реквизита метаданного, значение - его значения
//
Функция Параметры(Знач ДопПараметры = Неопределено) Экспорт
    
    Р = Новый Структура ();
    Р.Вставить("Наименование");
    Р.Вставить("Реквизит1", Перечисления.Перечисление1.ЗначениеПеречисления2);
    
    Р.Вставить ("ОбменДанными", Новый Структура("Загрузка", Истина));
    
    Если ЗначениеЗаполнено(ДопПараметры) Тогда
        Для Каждого КлючЗначение Из ДопПараметры Цикл
            Р.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
        КонецЦикла;
    КонецЕсли;

    Возврат Р;

КонецФункции

// Создать нужный элемент, документ, набор записей и т.п.
//
// Параметры:
//  Параметры	 - Структура	 - 
// 		Может быть вложенная структура ОбменДанными, с ключом Загрузка
// 
// Возвращаемое значение:
//   Произвольный, СправочникОбъект, ДокументОбъект, НаборЗаписей - созданный и записанный элемент
//
Функция Создать(Знач Параметры = Неопределено) Экспорт
    
    НовыйЭлемент = Справочники.Справочник1.СоздатьЭлемент();

    Если Не ЗначениеЗаполнено(Параметры) Тогда
        Параметры = Параметры();
    КонецЕсли;

    ЗаполнитьЗначенияСвойств(НовыйЭлемент, Параметры);

    Если Параметры.Свойство("ОбменДанными") Тогда
        ЗаполнитьЗначенияСвойств(НовыйЭлемент.ОбменДанными, Параметры.ОбменДанными);
    КонецЕсли;

    НовыйЭлемент.Записать();

    Возврат НовыйЭлемент;

КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Настройки

Процедура Настройки(мКонтекстЯдра, Знач ПутьНастройки)

	Если ЗначениеЗаполнено(Настройки) Тогда
		Возврат;
	КонецЕсли;
	
	ПлагинНастроек = мКонтекстЯдра.Плагин("Настройки");
	Настройки = ПлагинНастроек.ПолучитьНастройку(ПутьНастройки);
	
	Если Не ЗначениеЗаполнено(Настройки) Тогда
		Настройки = Новый Структура(ПутьНастройки, Неопределено);
		Возврат;
	КонецЕсли;
		
КонецПроцедуры

Функция ИмяТеста()
	Возврат Метаданные().Имя;
КонецФункции

Функция ВыполнятьТест(КонтекстЯдра)
	
	ПутьНастройки = КлючНастройки();
	Настройки(КонтекстЯдра, ПутьНастройки);
	
	Если Не ЗначениеЗаполнено(Настройки) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ИмяТеста = ИмяТеста();
	
	ВыполнятьТест = Истина;
	Если ТипЗнч(Настройки) = Тип("Структура") 
		И Настройки.Свойство("Параметры") 
		И Настройки.Параметры.Свойство(ИмяТеста) Тогда

			ВыполнятьТест = Настройки.Параметры[ИмяТеста];	
	КонецЕсли;
	
	Возврат ВыполнятьТест;

КонецФункции

Функция КлючНастройки()
	Возврат ИмяТеста();	
КонецФункции

#КонецОбласти

Функция ТекстСообщения(Результат)

	ШаблонСообщения = НСтр("ru = '!!! Заменить на свой текст: %1%2'");
	ТекстСообщения = СтроковыеУтилиты.ПодставитьПараметрыВСтроку(ШаблонСообщения, Символы.ПС, Результат);
	
	Возврат ТекстСообщения;

КонецФункции

Функция ОбработатьОтносительныйПуть(Знач ОтносительныйПуть, КонтекстЯдра)

	Если Лев(ОтносительныйПуть, 1) = "." И ЗначениеЗаполнено(КонтекстЯдра.Объект.КаталогПроекта) Тогда
		ОтносительныйПуть = СтроковыеУтилиты.ПодставитьПараметрыВСтроку(
								"%1%2", 
								КонтекстЯдра.Объект.КаталогПроекта, 
								Сред(ОтносительныйПуть, 2));
	КонецЕсли;
	
	Результат = СтрЗаменить(ОтносительныйПуть, "\\", "\");
		
	Возврат Результат;

КонецФункции 

#КонецОбласти

//} 

