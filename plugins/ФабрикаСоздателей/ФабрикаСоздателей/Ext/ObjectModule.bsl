#Область ОписаниеПеременных

Перем КонтекстЯдра;

#Область ФабрикаСоздателей

//Перем Создатели;

Перем СооответствиеВидовМетаданных;

#КонецОбласти

#КонецОбласти

#Область ПрограммныйИнтерфейс

#Область ИнтерфейсПлагина

// { Plugin interface
Функция ОписаниеПлагина(ВозможныеТипыПлагинов) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Тип", ВозможныеТипыПлагинов.Утилита);
	Результат.Вставить("Идентификатор", "ФабрикаСоздателей");
	Результат.Вставить("Представление", "Фабрика создателей");
	
	Возврат Новый ФиксированнаяСтруктура(Результат);
	
КонецФункции

Процедура Инициализация(КонтекстЯдраПараметр) Экспорт
	
	КонтекстЯдра = КонтекстЯдраПараметр;
	
КонецПроцедуры

// } Plugin interface
#КонецОбласти

#Область ФабрикаСоздателей

// Подключить всех создателей
//
Процедура ПодключитьВсехСоздателей(КонтекстЯдраПараметр) Экспорт
	
	КонтекстЯдра = КонтекстЯдраПараметр;
	
	ТипСоздатель = КонтекстЯдра.ТипыПлагинов.Создатель;
	ОписанияСоздателей = КонтекстЯдра.ПолучитьОписанияПлагиновПоТипу(ТипСоздатель);
	
	Для Каждого ОписаниеПлагина Из ОписанияСоздателей Цикл
		
		Создатель = КонтекстЯдра.Плагин(ОписаниеПлагина.Идентификатор);
		Создатель.Подключить(КонтекстЯдра, ЭтотОбъект);
		
	КонецЦикла;
	
КонецПроцедуры

// Подключить создателя. Если путь данных явно не задан, он получается из создателя
//
// Параметры:
//  ОбъектСоздатель	 - Произвольный - 
//  ИерархияДанных	 - Строка	 - 
// 
// Возвращаемое значение:
//   Произвольный - подключаемый создатель
//
Функция ПодключитьСоздателя(Знач ОбъектСоздатель, Знач ИерархияДанных = "") Экспорт
	
	Если ПустаяСтрока(ИерархияДанных) Тогда
		ИерархияДанных = ОбъектСоздатель.ТипВидМетаданного();
	КонецЕсли;
	НормализованныйПуть = НормализованныйПуть(ИерархияДанных);
	
	Создатели().Вставить(НормализованныйПуть, ОбъектСоздатель);
	
	Возврат ОбъектСоздатель;
	
КонецФункции

// Получить создателя по пути к данным вида "Справочник.Справочник1"
//
// Параметры:
//  ПутьДанных	 - Строка - 
// 
// Возвращаемое значение:
//   Произвольный, Неопределено - найденный создатель
//
Функция Создатель(Знач ПутьДанных) Экспорт
	
	НормализованныйПуть = НормализованныйПуть(ПутьДанных);
	
	Результат = Создатели().Получить(НормализованныйПуть);
	Если Результат = Неопределено Тогда
		ВызватьИсключение "Не удалось найти создателя данных по пути " + ПутьДанных;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Нормализованный путь - приводит разные имена Справочник.ХХХ, Справочники.ХХХ и т.п.
// 	в единый формат единственного числа Справочник.ХХХ, Документ.ХХХХ и т.п.
// 
// Возвращаемое значение:
//   Строка - имя метаданного в единственном числе Справочник.ХХХ, Документ.ХХХ и т.п. 
//
Функция НормализованныйПуть(Знач ПутьДанных) Экспорт
	
	ГдеИскать = СооответствиеВидовМетаданных();
	Для Каждого КлючЗначение Из ГдеИскать Цикл
		Если Найти(ПутьДанных, КлючЗначение.Ключ) = 1 Тогда
			Описание = КлючЗначение.Значение;
			Возврат Описание.Значение + Сред(ПутьДанных, Описание.Длина + 1);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПутьДанных;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СооответствиеВидовМетаданных()
	
	Если ЗначениеЗаполнено(СооответствиеВидовМетаданных) Тогда
		Возврат СооответствиеВидовМетаданных;
	КонецЕсли;
	
	П = Новый Соответствие;
	П.Вставить("Справочник", "Справочники");
	П.Вставить("Документ", "Документы");
	П.Вставить("БизнесПроцесс", "БизнесПроцессы");
	П.Вставить("Задача", "Задачи");
	П.Вставить("Константа", "Константы");
	П.Вставить("РегистрСведений", "РегистрыСведений");
	П.Вставить("РегистрНакопления", "РегистрыНакопления");
	П.Вставить("РегистрБухгалтерии", "РегистрыБухгалтерии");
	П.Вставить("РегистрРасчета", "РегистрыРасчета");
	П.Вставить("ПланСчетов", "ПланыСчетов");
	П.Вставить("ПланВидовХарактеристик", "ПланыВидовХарактеристик");
	
	Результат = Новый Соответствие;
	Для Каждого КлючЗначение Из П Цикл
		КлючСТочкой = КлючЗначение.Ключ + ".";
		КлючСТочкойВРег = ВРег(КлючСТочкой);
		
		Описание = Новый Структура("Значение, Длина", КлючСТочкойВРег, СтрДлина(КлючСТочкой));
		Результат.Вставить(КлючСТочкой, Описание);
		
		ЗначениеСТочкой = КлючЗначение.Значение + ".";
		
		Описание = Новый Структура("Значение, Длина", КлючСТочкойВРег, СтрДлина(ЗначениеСТочкой));
		Результат.Вставить(КлючЗначение.Значение + ".", Описание);
	КонецЦикла;
	
	СооответствиеВидовМетаданных = Новый ФиксированноеСоответствие(Результат);
	
	Возврат СооответствиеВидовМетаданных;
	
КонецФункции

Функция Создатели()
	
	Если Не ЗначениеЗаполнено(Создатели) Тогда
		Создатели = Новый Соответствие;
	КонецЕсли;
	
	Возврат  Создатели;
КонецФункции

#КонецОбласти

//} 

