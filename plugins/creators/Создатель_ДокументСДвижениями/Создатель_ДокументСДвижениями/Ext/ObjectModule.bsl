#Область ОписаниеПеременных
Перем КонтекстЯдра;
Перем Ожидаем;
Перем Утверждения;
Перем ГенераторТестовыхДанных;
Перем ЗапросыИзБД;
Перем УтвержденияПроверкаТаблиц;
Перем СтроковыеУтилиты;
Перем Данные;
Перем ФабрикаСоздателей;

#Область Создатель

Перем ПутьДанныхСоздателя;

#КонецОбласти

#КонецОбласти

#Область ПрограммныйИнтерфейс

#Область ИнтерфейсПлагина

// { Plugin interface
Функция ОписаниеПлагина(ВозможныеТипыПлагинов) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Тип", ВозможныеТипыПлагинов.Создатель);
	Результат.Вставить("Идентификатор", "Создатель_ДокументСДвижениями");
	Результат.Вставить("Представление", "Создатель документ с движениями");
	
	Возврат Новый ФиксированнаяСтруктура(Результат);
	
КонецФункции

Процедура Инициализация(КонтекстЯдраПараметр) Экспорт
	
	ПутьДанныхСоздателя = "Документ.ДокументСДвижениями";
	
КонецПроцедуры

// } Plugin interface
#КонецОбласти

#Область Создатель

#Область Интерфейс_Создатель

// Подключить создателя к фабрике создателей
//
// Параметры:
//  КонтекстЯдраПараметр - ВнешниеОбработки.xddTestRunner	 - 
//  ФабрикаСоздателей	 - ВнешниеОбработки.ФабрикаСоздателей	 - 
//
Процедура Подключить(КонтекстЯдраПараметр, ФабрикаСоздателей) Экспорт
	
	КонтекстЯдра = КонтекстЯдраПараметр;
	
	ПутьДанныхСоздателя = "Документ.ДокументСДвижениями";
	ФабрикаСоздателей.ПодключитьСоздателя(ЭтотОбъект, ПутьДанныхСоздателя);
	
КонецПроцедуры

// Указать путь создаваемого метаданного - Справочники.Склады, Документы.Реализация и т.п.
// 
// Возвращаемое значение:
//   Строка - 
//
Функция ТипВидМетаданного() Экспорт
	
	Возврат ПутьДанныхСоздателя;

КонецФункции

// Задать параметры по умолчанию для создания метаданного
// 	Можно добавлять доп.структуру ОбменДанными с Загрузка = Истина
// Необязателен. В классе должен быть реализован или метод Параметры или метод ЗаполнитьПараметры
//
// Параметры:
//  ДопПараметры - Неопределено, Структура	 - доп.параметры для установки
// 
// Возвращаемое значение:
//   Структура - ключ - имя реквизита метаданного, значение - его значения
//
Функция Параметры(Знач ДопПараметры = Неопределено) Экспорт
    
    Р = Новый Структура ();
	
	ЗаполнитьПараметры(Р);
	
	Если Не Р.Свойство("Проведен") Или Не Р.Проведен Тогда
    	Р.Вставить ("ОбменДанными", Новый Структура("Загрузка", Истина));
	КонецЕсли;
    
    Если ЗначениеЗаполнено(ДопПараметры) Тогда
        Для Каждого КлючЗначение Из ДопПараметры Цикл
            Р.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
        КонецЦикла;
    КонецЕсли;

    Возврат Р;

КонецФункции

// Заполнить параметры по умолчанию, остальные параметры будут заданы по умолчанию
// Полезно вызывать, если нужно просто добавить обычные параметры, без доп.обработки
// Далее эти параметры будут дополнены внутри метода Параметры. см. Параметры
// Необязателен. В классе должен быть реализован или метод Параметры или метод ЗаполнитьПараметры
//
// Параметры:
//  Параметры	 - Структура	 - пустая таблица параметров
//
Процедура ЗаполнитьПараметры(Знач Параметры) Экспорт
	
	Если ПутьДанныхСоздателя = "Документ.ДокументСДвижениями" Тогда
		
		Параметры.Вставить("Дата", ТекущаяДатаСеанса());
		Параметры.Вставить("Проведен", Истина);
		Параметры.Вставить("ПометкаУдаления", Ложь);
		
		Параметры.Вставить("ТабЧасть", Новый Массив);
		
		Параметры.Вставить("РеквизитПростойСправочник", Справочники.ПростойСправочник.ПредопределенноеЗначение1);
		//Параметры.Вставить("РеквизитПростойСправочник", Справочники.ПростойСправочник2.);
		
	Иначе
		ВызватьИсключение "Еще не умеем устанавливать параметры для пути " + ПутьДанныхСоздателя;
	КонецЕсли;
	
КонецПроцедуры

// Создать нужный элемент, документ, набор записей и т.п.
// Необязателен. В классе должен быть реализован или метод Создать или метод СоздатьПоУмолчанию
//
// Параметры:
//  Параметры	 - Структура	 - 
// 		Может быть вложенная структура ОбменДанными, с ключом Загрузка
// 
// Возвращаемое значение:
//   Произвольный, СправочникОбъект, ДокументОбъект, НаборЗаписей - созданный и записанный элемент
//
Функция Создать(Знач Параметры = Неопределено) Экспорт
    
    Если Не ЗначениеЗаполнено(Параметры) Тогда
        Параметры = Параметры();
	КонецЕсли;
	
	НовыйЭлемент = СоздатьПоУмолчанию(Параметры);

    ЗаполнитьЗначенияСвойств(НовыйЭлемент, Параметры);

    Если Параметры.Свойство("ОбменДанными") Тогда
        ЗаполнитьЗначенияСвойств(НовыйЭлемент.ОбменДанными, Параметры.ОбменДанными);
    КонецЕсли;

    НовыйЭлемент.Записать();

    Возврат НовыйЭлемент;

КонецФункции

// Создать по умолчанию
// Полезно вызывать, если нужно просто добавить обычные параметры, без доп.обработки
// Далее созданный объект будет дозаполнен внутри метода Создать. см. Создать
// Необязателен. В классе должен быть реализован или метод Создать или метод СоздатьПоУмолчанию
//
// Параметры:
//  Параметры	 - Структура	 - 
// 
// Возвращаемое значение:
//   Произвольный, СправочникОбъект, ДокументОбъект, НаборЗаписей - созданный, еще не записанный элемент
//
Функция СоздатьПоУмолчанию(Знач Параметры) Экспорт
	
	Если ПутьДанныхСоздателя = "Документ.ДокументСДвижениями" Тогда
		
	    НовыйЭлемент = Документы.ДокументСДвижениями.СоздатьДокумент();
		
		Для Каждого ОписаниеСтроки Из Параметры.ТабЧасть Цикл
			НоваяСтрока = НовыйЭлемент.ТЧ.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ОписаниеСтроки);
		КонецЦикла;

	Иначе
		ВызватьИсключение "Еще не умеем устанавливать параметры для пути " + ПутьДанныхСоздателя;
	КонецЕсли;
	
	Возврат НовыйЭлемент;
	
КонецФункции

// Установить путь данных. Необязательно. Обычно создатель сам знает, какие данные он создает
//
// Параметры:
//  ПутьДанных	 - Строка - путь данных Справочники.Склады, Документы.Реализация и т.п.  
//
Процедура УстановитьПутьДанных(Знач ПутьДанных) Экспорт
	
	ПутьДанныхСоздателя = ПутьДанных;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#КонецОбласти

//} 

